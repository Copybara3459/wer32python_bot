import logging
import os
import time

from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.dispatcher.filters.state import State, StatesGroup


storage=MemoryStorage()
# Replace 'BOT_TOKEN' with your actual bot token
bot = Bot(token=os.getenv('BOT_TOKEN'))
dp = Dispatcher(bot, storage=storage)


# Enable logging (optional but recommended)
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

# Start command handler
@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):

    markup = types.InlineKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)
    await message.answer("–ë–æ—Ç —ñ–Ω—Ñ—Ä–º–∞—Ü—ñ—ó")
    keyBoard1 = types.InlineKeyboardButton(text='üìù–ü–æ–≤—ñ—Å—Ç–∫–∞', callback_data='notice')
    keyBoard2 = types.InlineKeyboardButton(text='‚ùì–ü–∏—Ç–∞–Ω–Ω—è', callback_data='question')
    keyBoard3 = types.InlineKeyboardButton(text='üí¨–í—ñ–¥–ø–æ–≤—ñ–¥—å', callback_data='answer')
    markup.add(keyBoard1, keyBoard2, keyBoard3)
    await bot.send_message(message.from_user.id, '–ü—Ä–∏–≤—ñ—Ç,–∑–∞–¥–∞–π—Ç–µ –ø–∏—Ç–∞–Ω–Ω—è,–≤—ñ–¥–ø–æ–≤—ñ–¥—å –∞–±–æ –º—ñ—Å—Ç–æ –≤—Ä—É—á–µ–Ω–Ω—è –ø–æ–≤—ñ—Å—Ç–∫–∏',reply_markup=markup) #–†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–∑–≤-–ª—å –∫–æ–≥–¥–∞—Ç–æ –ø–∏—Å–∞–ª –±–æ—Ç—É
    

    row = int(message.message_id)
    inter = message.message_id - 1

    for row in range(inter):
        message_id = message.message_id - row
        await bot.delete_message(chat_id = message.from_user.id,message_id=message_id)
    



@dp.callback_query_handler(text='notice')
async def notice(callback: types.CallbackQuery):
    await callback.message.answer(f'–≤—Ä—É—á–µ–Ω–Ω—è –ø–æ–≤—ñ—Å—Ç–∫–∏ —É —Ñ–æ—Ä–º–∞—Ç—ñ –ø–æ—á–∏–Ω–∞—é—á–∏: \n ! –º/—Å.—ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è \n –∑–Ω–∞–∫ –æ–∫–ª–∏–∫—É –º—ñ—Å—Ç–æ —á–∏ —Å–µ–ª–æ(–≤–∏–±–∏—Ä–∞—î—Ç–µ –º —á–∏ —Å) –∫—Ä–∞–ø–∫–∞ –Ω–∞–∑–≤–∞ '
                                '–Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É ,—è–∫—â–æ —Å–µ–ª–æ –∑–∞–∑–Ω–∞—á–∞—î—Ç–µ –ø–∏—à–∏—Ç–µ —Ä–∞–π–æ–Ω(–º–æ–∂–Ω–∞ —Å–∫–æ—Ä–æ—á–µ–Ω–æ:.—Ä), –¥–∞–ª—ñ –ø–æ –º–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –≤—É–ª–∏—Ü—è(–ø–∏—à-—Ç–µ: –≤—É–ª) –∫—Ä–∞–ø–∫–∞ –Ω–∞–∑–≤–∞, —ñ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è \n –ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n'
                                '!–º.–í—ñ–Ω–Ω–∏—Ü—è –≤—É–ª.–õ–µ—Å—ñ –£–∫—Ä–∞—ó–Ω–∫–∏ –±—ñ–ª—è –∞–≤—Ç–æ–≤–æ–∫–∑–∞–ª—É\n!—Å.–°–æ—Ä–æ—á–µ–Ω—Ü—ñ –í—ñ–Ω–Ω–µ—Ü—å–∫–∏–π.—Ä –±—ñ–ª—è —à–∫–æ–ª–∏ ‚Ññ3')

@dp.callback_query_handler(text='question')
async def question(callback: types.CallbackQuery):
    await callback.message.answer(f'–ó–∞–¥–∞–π—Ç–µ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ –ø—Ä–∏–∫–ª–∞–¥: \n ? –≤–∞—à–µ –ø–∏—Ç–∞–Ω–Ω—è')

@dp.callback_query_handler(text='answer')
async def answer(callback: types.CallbackQuery):
    await callback.message.answer(f'–î–∞–π—Ç–µ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ –∑–∞–ø–∏—Ç–∞–Ω–Ω—è —É –ø—Ä–∏–∫–ª–∞–¥: \n + –≤–∞—à–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å')






# Feedback message handler
@dp.message_handler(lambda message: message.text.startswith('!'))
async def notice(message: types.Message):
    # Extract the feedback text from the message
    time.sleep(3)
    notice_text = message.text.replace('!', '', 1).strip()

    # Send the feedback to the chat (replace 'YOUR_CHAT_ID' with the actual chat ID)
    chat_id = -1001979727750  # You can replace this with your specific chat ID
    await bot.send_message(chat_id, f"üìù\n{notice_text}")

    # Optionally, you can store the feedback in a database or perform other actions here
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é!")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)

    markup.add(types.KeyboardButton('/start'))
    await bot.send_message(message.from_user.id,'–í–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ–Ω—é? –ù–∞–∂–º—ñ—Ç—å —Å—Ç–∞—Ä—Ç',reply_markup=markup)



@dp.message_handler(lambda message: message.text.startswith('?'))
async def question(message: types.Message):
    # Extract the feedback text from the message
    time.sleep(3)
    question_text = message.text.replace('?', '', 1).strip()

    # Send the feedback to the chat (replace 'YOUR_CHAT_ID' with the actual chat ID)
    chat_id = -1001979727750  # You can replace this with your specific chat ID
    await bot.send_message(chat_id, f"‚ùì\n{question_text}")

    # Optionally, you can store the feedback in a database or perform other actions here
    await message.answer("–û—á—ñ–∫—É–π—Ç–µ –º–æ–∂–ª–∏–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!")
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)

    markup.add(types.KeyboardButton('/start'))
    await bot.send_message(message.from_user.id,'–í–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ–Ω—é? –ù–∞–∂–º—ñ—Ç—å —Å—Ç–∞—Ä—Ç',reply_markup=markup)


@dp.message_handler(lambda message: message.text.startswith('+'))
async def answer(message: types.Message):
    # Extract the feedback text from the message
    time.sleep(3)
    answer_text = message.text.replace('+', '', 1).strip()

    # Send the feedback to the chat (replace 'YOUR_CHAT_ID' with the actual chat ID)
    chat_id = -1001979727750  # You can replace this with your specific chat ID
    await bot.send_message(chat_id, f"üí¨\n{answer_text}")

    # Optionally, you can store the feedback in a database or perform other actions here
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å!")

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True,one_time_keyboard=True)

    markup.add(types.KeyboardButton('/start'))
    await bot.send_message(message.from_user.id,'–í–∏–∫–ª–∏–∫–∞—Ç–∏ –º–µ–Ω—é? –ù–∞–∂–º—ñ—Ç—å —Å—Ç–∞—Ä—Ç',reply_markup=markup)

if __name__ == '__main__':
    from aiogram import executor

    executor.start_polling(dp, skip_updates=True)


